{"version":3,"sources":["theme.js","calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","useStyles","makeStyles","container","display","flexDirection","alignItems","padding","spacing","button","marginTop","alignSelf","Calculator","classes","Paper","className","elevation","Grid","direction","justify","item","TextField","id","label","variant","fullWidth","Button","color","root","width","justifyContent","maxWidth","minHeight","App","ThemeProvider","CssBaseline","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAOeA,EALDC,YAAe,CAC3BC,QAAS,K,gCCILC,EAAYC,aAAW,SAACJ,GAAD,MAAY,CACvCK,UAAW,CACTC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,QAAST,EAAMU,QAAQ,IAEzBC,OAAQ,CACNC,UAAWZ,EAAMU,QAAQ,GACzBG,UAAW,gBAiCAC,EA7BI,WACjB,IAAMC,EAAUZ,IAEhB,OACE,kBAACa,EAAA,EAAD,CAAOC,UAAWF,EAAQV,UAAWa,UAAW,GAC9C,kBAACC,EAAA,EAAD,CAAMd,WAAS,EAACe,UAAU,SAASC,QAAQ,SAASX,QAAS,GAC3D,kBAACS,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACC,EAAA,EAAD,CAAWC,GAAG,mBAAmBC,MAAM,0BAA0BC,QAAQ,WAAWC,WAAW,KAEjG,kBAACR,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACC,EAAA,EAAD,CAAWC,GAAG,YAAYC,MAAM,MAAMC,QAAQ,WAAWC,WAAW,KAEtE,kBAACR,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACC,EAAA,EAAD,CAAWC,GAAG,uBAAuBC,MAAM,yBAAyBC,QAAQ,WAAWC,WAAW,KAEpG,kBAACR,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACC,EAAA,EAAD,CAAWC,GAAG,eAAeC,MAAM,kBAAkBC,QAAQ,WAAWC,WAAW,KAErF,kBAACR,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACC,EAAA,EAAD,CAAWC,GAAG,qBAAqBC,MAAM,qBAAqBC,QAAQ,WAAWC,WAAW,MAGhG,kBAACC,EAAA,EAAD,CAAQX,UAAWF,EAAQJ,OAAQe,QAAQ,YAAYG,MAAM,WAA7D,eClCA1B,EAAYC,aAAW,SAACJ,GAAD,MAAY,CACvC8B,KAAM,CACJjB,UAAW,SACXkB,MAAO,OACPzB,QAAS,OACT0B,eAAgB,SAChBxB,WAAY,SACZI,UAAWZ,EAAMU,QAAQ,GACzB,QAAS,CACPuB,SAAU,IACVF,MAAO,IACPG,UAAW,UAiBFC,MAZf,WACE,IAAMpB,EAAUZ,IAChB,OACE,kBAACiC,EAAA,EAAD,CAAepC,MAAOA,GACpB,kBAACqC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWL,SAAS,KAAKhB,UAAWF,EAAQe,MAC1C,kBAAC,EAAD,SClBYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.618e598f.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n  },\n});\n\nexport default theme","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: theme.spacing(5)\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    alignSelf: 'flex-end'\n  }\n}));\n\nconst Calculator = () => {\n  const classes = useStyles();\n  \n  return (\n    <Paper className={classes.container} elevation={3}>\n      <Grid container direction=\"column\" justify=\"center\" spacing={3}>\n        <Grid item>\n          <TextField id=\"input-withdrawal\" label=\"Super withdrawal amount\" variant=\"outlined\" fullWidth={true} />\n        </Grid>\n        <Grid item>\n          <TextField id=\"input-age\" label=\"Age\" variant=\"outlined\" fullWidth={true} />\n        </Grid>\n        <Grid item>\n          <TextField id=\"input-retirement-age\" label=\"Desired retirement age\" variant=\"outlined\" fullWidth={true} />\n        </Grid>\n        <Grid item>\n          <TextField id=\"input-salary\" label=\"Salary (annual)\" variant=\"outlined\" fullWidth={true} />\n        </Grid>\n        <Grid item>\n          <TextField id=\"input-contribution\" label=\"Super contribution\" variant=\"outlined\" fullWidth={true} />\n        </Grid>\n      </Grid>\n      <Button className={classes.button} variant=\"contained\" color=\"primary\">\n        Calculate\n      </Button>\n    </Paper>\n  )\n}\n\nexport default Calculator\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { makeStyles } from '@material-ui/core/styles';\nimport theme from './theme'\nimport Calculator from './calculator'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    alignSelf: 'center',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: theme.spacing(4),\n    '& > *': {\n      maxWidth: 800,\n      width: 500,\n      minHeight: 200\n    },\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Container maxWidth=\"sm\" className={classes.root}>\n        <Calculator />\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}